// source: dto.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.dto.Bundle', null, global);
goog.exportSymbol('proto.dto.ExternalMessage', null, global);
goog.exportSymbol('proto.dto.MempoolExternalMessage', null, global);
goog.exportSymbol('proto.dto.MempoolPacket', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dto.MempoolExternalMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dto.MempoolExternalMessage.repeatedFields_, null);
};
goog.inherits(proto.dto.MempoolExternalMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dto.MempoolExternalMessage.displayName = 'proto.dto.MempoolExternalMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dto.MempoolPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dto.MempoolPacket.repeatedFields_, null);
};
goog.inherits(proto.dto.MempoolPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dto.MempoolPacket.displayName = 'proto.dto.MempoolPacket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dto.ExternalMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dto.ExternalMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dto.ExternalMessage.displayName = 'proto.dto.ExternalMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dto.Bundle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dto.Bundle.repeatedFields_, null);
};
goog.inherits(proto.dto.Bundle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dto.Bundle.displayName = 'proto.dto.Bundle';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dto.MempoolExternalMessage.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dto.MempoolExternalMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.dto.MempoolExternalMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dto.MempoolExternalMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dto.MempoolExternalMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    workchainId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    shard: msg.getShard_asB64(),
    data: msg.getData_asB64(),
    stdSmcAddress: msg.getStdSmcAddress_asB64(),
    gasSpent: jspb.Message.getFieldWithDefault(msg, 6, 0),
    outMsgsList: msg.getOutMsgsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dto.MempoolExternalMessage}
 */
proto.dto.MempoolExternalMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dto.MempoolExternalMessage;
  return proto.dto.MempoolExternalMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dto.MempoolExternalMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dto.MempoolExternalMessage}
 */
proto.dto.MempoolExternalMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorkchainId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setShard(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStdSmcAddress(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasSpent(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addOutMsgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dto.MempoolExternalMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dto.MempoolExternalMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dto.MempoolExternalMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dto.MempoolExternalMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getWorkchainId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getShard_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getStdSmcAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getGasSpent();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getOutMsgsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      7,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dto.MempoolExternalMessage.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.dto.MempoolExternalMessage.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.dto.MempoolExternalMessage.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dto.MempoolExternalMessage} returns this
 */
proto.dto.MempoolExternalMessage.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 workchain_id = 2;
 * @return {number}
 */
proto.dto.MempoolExternalMessage.prototype.getWorkchainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.dto.MempoolExternalMessage} returns this
 */
proto.dto.MempoolExternalMessage.prototype.setWorkchainId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes shard = 3;
 * @return {!(string|Uint8Array)}
 */
proto.dto.MempoolExternalMessage.prototype.getShard = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes shard = 3;
 * This is a type-conversion wrapper around `getShard()`
 * @return {string}
 */
proto.dto.MempoolExternalMessage.prototype.getShard_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getShard()));
};


/**
 * optional bytes shard = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getShard()`
 * @return {!Uint8Array}
 */
proto.dto.MempoolExternalMessage.prototype.getShard_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getShard()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dto.MempoolExternalMessage} returns this
 */
proto.dto.MempoolExternalMessage.prototype.setShard = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.dto.MempoolExternalMessage.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.dto.MempoolExternalMessage.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.dto.MempoolExternalMessage.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dto.MempoolExternalMessage} returns this
 */
proto.dto.MempoolExternalMessage.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes std_smc_address = 5;
 * @return {!(string|Uint8Array)}
 */
proto.dto.MempoolExternalMessage.prototype.getStdSmcAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes std_smc_address = 5;
 * This is a type-conversion wrapper around `getStdSmcAddress()`
 * @return {string}
 */
proto.dto.MempoolExternalMessage.prototype.getStdSmcAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStdSmcAddress()));
};


/**
 * optional bytes std_smc_address = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStdSmcAddress()`
 * @return {!Uint8Array}
 */
proto.dto.MempoolExternalMessage.prototype.getStdSmcAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStdSmcAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dto.MempoolExternalMessage} returns this
 */
proto.dto.MempoolExternalMessage.prototype.setStdSmcAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional uint64 gas_spent = 6;
 * @return {number}
 */
proto.dto.MempoolExternalMessage.prototype.getGasSpent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.dto.MempoolExternalMessage} returns this
 */
proto.dto.MempoolExternalMessage.prototype.setGasSpent = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated bytes out_msgs = 7;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.dto.MempoolExternalMessage.prototype.getOutMsgsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * repeated bytes out_msgs = 7;
 * This is a type-conversion wrapper around `getOutMsgsList()`
 * @return {!Array<string>}
 */
proto.dto.MempoolExternalMessage.prototype.getOutMsgsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getOutMsgsList()));
};


/**
 * repeated bytes out_msgs = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOutMsgsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.dto.MempoolExternalMessage.prototype.getOutMsgsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getOutMsgsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.dto.MempoolExternalMessage} returns this
 */
proto.dto.MempoolExternalMessage.prototype.setOutMsgsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.dto.MempoolExternalMessage} returns this
 */
proto.dto.MempoolExternalMessage.prototype.addOutMsgs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dto.MempoolExternalMessage} returns this
 */
proto.dto.MempoolExternalMessage.prototype.clearOutMsgsList = function() {
  return this.setOutMsgsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dto.MempoolPacket.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dto.MempoolPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.dto.MempoolPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dto.MempoolPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dto.MempoolPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverTs: (f = msg.getServerTs()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    expirationNs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    externalMessagesList: jspb.Message.toObjectList(msg.getExternalMessagesList(),
    proto.dto.MempoolExternalMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dto.MempoolPacket}
 */
proto.dto.MempoolPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dto.MempoolPacket;
  return proto.dto.MempoolPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dto.MempoolPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dto.MempoolPacket}
 */
proto.dto.MempoolPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setServerTs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExpirationNs(value);
      break;
    case 3:
      var value = new proto.dto.MempoolExternalMessage;
      reader.readMessage(value,proto.dto.MempoolExternalMessage.deserializeBinaryFromReader);
      msg.addExternalMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dto.MempoolPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dto.MempoolPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dto.MempoolPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dto.MempoolPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerTs();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getExpirationNs();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getExternalMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.dto.MempoolExternalMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp server_ts = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.dto.MempoolPacket.prototype.getServerTs = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.dto.MempoolPacket} returns this
*/
proto.dto.MempoolPacket.prototype.setServerTs = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dto.MempoolPacket} returns this
 */
proto.dto.MempoolPacket.prototype.clearServerTs = function() {
  return this.setServerTs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dto.MempoolPacket.prototype.hasServerTs = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 expiration_ns = 2;
 * @return {number}
 */
proto.dto.MempoolPacket.prototype.getExpirationNs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.dto.MempoolPacket} returns this
 */
proto.dto.MempoolPacket.prototype.setExpirationNs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated MempoolExternalMessage external_messages = 3;
 * @return {!Array<!proto.dto.MempoolExternalMessage>}
 */
proto.dto.MempoolPacket.prototype.getExternalMessagesList = function() {
  return /** @type{!Array<!proto.dto.MempoolExternalMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dto.MempoolExternalMessage, 3));
};


/**
 * @param {!Array<!proto.dto.MempoolExternalMessage>} value
 * @return {!proto.dto.MempoolPacket} returns this
*/
proto.dto.MempoolPacket.prototype.setExternalMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.dto.MempoolExternalMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dto.MempoolExternalMessage}
 */
proto.dto.MempoolPacket.prototype.addExternalMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.dto.MempoolExternalMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dto.MempoolPacket} returns this
 */
proto.dto.MempoolPacket.prototype.clearExternalMessagesList = function() {
  return this.setExternalMessagesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dto.ExternalMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.dto.ExternalMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dto.ExternalMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dto.ExternalMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dto.ExternalMessage}
 */
proto.dto.ExternalMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dto.ExternalMessage;
  return proto.dto.ExternalMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dto.ExternalMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dto.ExternalMessage}
 */
proto.dto.ExternalMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dto.ExternalMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dto.ExternalMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dto.ExternalMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dto.ExternalMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dto.ExternalMessage.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.dto.ExternalMessage.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.dto.ExternalMessage.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dto.ExternalMessage} returns this
 */
proto.dto.ExternalMessage.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dto.Bundle.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dto.Bundle.prototype.toObject = function(opt_includeInstance) {
  return proto.dto.Bundle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dto.Bundle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dto.Bundle.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageList: jspb.Message.toObjectList(msg.getMessageList(),
    proto.dto.ExternalMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dto.Bundle}
 */
proto.dto.Bundle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dto.Bundle;
  return proto.dto.Bundle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dto.Bundle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dto.Bundle}
 */
proto.dto.Bundle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dto.ExternalMessage;
      reader.readMessage(value,proto.dto.ExternalMessage.deserializeBinaryFromReader);
      msg.addMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dto.Bundle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dto.Bundle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dto.Bundle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dto.Bundle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.dto.ExternalMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ExternalMessage message = 1;
 * @return {!Array<!proto.dto.ExternalMessage>}
 */
proto.dto.Bundle.prototype.getMessageList = function() {
  return /** @type{!Array<!proto.dto.ExternalMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dto.ExternalMessage, 1));
};


/**
 * @param {!Array<!proto.dto.ExternalMessage>} value
 * @return {!proto.dto.Bundle} returns this
*/
proto.dto.Bundle.prototype.setMessageList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.dto.ExternalMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dto.ExternalMessage}
 */
proto.dto.Bundle.prototype.addMessage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.dto.ExternalMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dto.Bundle} returns this
 */
proto.dto.Bundle.prototype.clearMessageList = function() {
  return this.setMessageList([]);
};


goog.object.extend(exports, proto.dto);
